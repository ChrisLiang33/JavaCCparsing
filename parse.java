/* Generated By:JavaCC: Do not edit this line. parse.java */
import java.io.*;
public class parse implements parseConstants {
    public static void main(String args[]) throws ParseException
    {
        System.out.println("Reading from standard input...");
        parse t = new parse(System.in);
        try {
            t.Program(0);
            System.out.println("Thank you.");
    }   catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
    }
    }

  static final public void Program(int indent) throws ParseException {
    MainClass(indent);
    ClassDecls(indent);
    jj_consume_token(0);
  }

  static final public void MainClass(int indent) throws ParseException {
 Token s,t;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LCBRACKET);
     System.out.println("class "+t.image+"{");
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
     System.out.print("    public static void main");
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    s = jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAREN);
     System.out.println("(String[] "+s.image + "){");
    jj_consume_token(LCBRACKET);
    Statement(indent+2);
    jj_consume_token(RCBRACKET);
    jj_consume_token(RCBRACKET);
     System.out.print("  }\n}\n");
  }

  static final public void ClassDecls(int indent) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ClassDecl(indent);
    }
  }

  static final public void ClassDecl(int indent) throws ParseException {
 Token t,s;
String a,b;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
     System.out.print("class "+t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      s = jj_consume_token(IDENTIFIER);
     System.out.print(" extends "+s.image);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LCBRACKET);
     System.out.print("{");
    a = VarDecls(indent+1);
     System.out.println(a);
    MethodDecls(indent+1);
    jj_consume_token(RCBRACKET);
     System.out.println("}");
  }

  static final public String VarDecls(int indent) throws ParseException {
 String a,b;
    if (jj_2_1(3)) {
      a = VarDecl(indent);
      b = VarDecls(indent);
     {if (true) return (a+b);}
    } else {

      {if (true) return("");}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String VarDecl(int indent) throws ParseException {
 Token t;
String a;
    a = Type();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
     {if (true) return
      String.format("\n%1$"+4*indent+"s","") + a + " " + t.image+";"
      ;}
    throw new Error("Missing return statement in function");
  }

  static final public void MethodDecls(int indent) throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      MethodDecl(indent);
    }
    VarDecls(indent);
  }

  static final public void MethodDecl(int indent) throws ParseException {
  String s,t;
String v ="";
Token a;
    jj_consume_token(PUBLIC);
    t = Type();
    a = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    s = FormalList();
  System.out.format("%1$"+4*indent+"s", "");
  System.out.print("public "+t+" " + a.image + "(" + s+ ")" + "{");
    jj_consume_token(RPAREN);
    jj_consume_token(LCBRACKET);
    v = VarDecls(indent+1);
   System.out.println(v);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case IDENTIFIER:
      case LCBRACKET:
      case PRINT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      Statement(indent+1);
    }
    jj_consume_token(RETURN);
   System.out.format("%1$"+4*(indent+1)+"s", "");
   System.out.print("return ");
    Exp();
    jj_consume_token(SEMICOLON);
   System.out.print(";");
    jj_consume_token(RCBRACKET);
   System.out.println("");
   System.out.format("%1$"+4*indent+"s", "");
   System.out.println("}");
  }

  static final public String FormalList() throws ParseException {
 Token a;
String b,c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case INT_ARRAY:
    case IDENTIFIER:
      c = Type();
      a = jj_consume_token(IDENTIFIER);
      b = FormalRests();
     {if (true) return(c+" " + a + b);}
      break;
    default:
      jj_la1[4] = jj_gen;

       {if (true) return("");}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String FormalRests() throws ParseException {
 String a,b;
    if (jj_2_2(3)) {
      a = FormalRest();
      b = FormalRests();
     {if (true) return (a+b);}
    } else {

      {if (true) return("");}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String FormalRest() throws ParseException {
 String a;
Token b;
    jj_consume_token(COMMA);
    a = Type();
    b = jj_consume_token(IDENTIFIER);
   {if (true) return (", "+a+" " +b.image);}
    throw new Error("Missing return statement in function");
  }

  static final public String Type() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_ARRAY:
      t = jj_consume_token(INT_ARRAY);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Statements(int indent) throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case IDENTIFIER:
      case LCBRACKET:
      case PRINT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      Statement(indent);
    }
  }

  static final public void Statement(int indent) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCBRACKET:
      jj_consume_token(LCBRACKET);
       System.out.println("{");
      Statements(indent);
       System.out.println("");
       System.out.format("%1$"+4*(indent-1)+"s", "");
       System.out.print("}");
      jj_consume_token(RCBRACKET);
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
   System.out.format("%1$"+4*indent+"s", "");
     System.out.print("if (");
      Exp();
      jj_consume_token(RPAREN);
     System.out.print(")");
      Statement(indent+1);
   System.out.println("");
      jj_consume_token(ELSE);
     System.out.format("%1$"+4*indent+"s", "");
     System.out.print("else");
      Statement(indent+1);
     System.out.println();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
   System.out.format("%1$"+4*indent+"s", "");
     System.out.print("while (");
      Exp();
      jj_consume_token(RPAREN);
   System.out.print(")");
      Statement(indent+1);
     System.out.println();
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
   System.out.format("%1$"+4*indent+"s", "");
     System.out.print("System.out.println(");
      Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
     System.out.print(");");
     System.out.println();
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_3(2)) {
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUALS);
   System.out.format("%1$"+4*indent+"s", "");
     System.out.print(t.image+"=");
        Exp();
        jj_consume_token(SEMICOLON);
     System.out.print(";");
     System.out.println();
      } else if (jj_2_4(2)) {
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(LBRACKET);
   System.out.format("%1$"+4*indent+"s", "");
     System.out.print(t.image+"[");
        Exp();
        jj_consume_token(RBRACKET);
        jj_consume_token(EQUALS);
     System.out.print("]=");
        Exp();
     System.out.print(";");
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Exp() throws ParseException {
    Exp4();
  }

  static final public void Exp4() throws ParseException {
    Exp9();
    Exp4a();
  }

  static final public void Exp4a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
   System.out.print("&&");
      Exp9();
      Exp4a();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  static final public void Exp9() throws ParseException {
    Exp11();
    Exp9a();
  }

  static final public void Exp9a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
   System.out.print("<");
      Exp11();
      Exp9a();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  static final public void Exp11() throws ParseException {
    Exp12();
    Exp11a();
  }

  static final public void Exp11a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
   System.out.print("+");
      Exp12();
      Exp11a();
      break;
    case MINUS:
      jj_consume_token(MINUS);
   System.out.print("-");
      Exp12();
      Exp11a();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  static final public void Exp12() throws ParseException {
    Exp14();
    Exp12a();
  }

  static final public void Exp12a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
   System.out.print("*");
      Exp14();
      Exp12a();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void Exp14() throws ParseException {
    Exp16();
    Exp14a();
  }

  static final public void Exp14a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
   System.out.print("!");
      Exp16();
      Exp14a();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  static final public void Exp16() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
     System.out.print(t.image);
      Exp();
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
     System.out.print("true");
      Exp();
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
     System.out.print("false");
      Exp();
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
     System.out.print(t.image);
      Exp();
      break;
    case THIS:
      t = jj_consume_token(THIS);
     System.out.print("this");
      Exp();
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(NEW);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
     System.out.print("new "+t.image+"()");
        jj_consume_token(RPAREN);
        Expa();
        Exp();
      } else if (jj_2_6(2)) {
        t = jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LBRACKET);
     System.out.print("new int [");
        Exp();
        jj_consume_token(RBRACKET);
        Expa();
        Exp();
      System.out.print("]");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          t = jj_consume_token(LPAREN);
     System.out.print("(");
          Exp();
          jj_consume_token(RPAREN);
     System.out.print(")");
          Expa();
          Exp();
          break;
        default:
          jj_la1[14] = jj_gen;
          Expa();
        }
      }
    }
  }

  static final public void Expa() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      // t=<OPERATOR> Exp() Expa()
       // |
        t = jj_consume_token(LBRACKET);
   System.out.print("[");
      Exp();
      jj_consume_token(RBRACKET);
   System.out.print("]");
      Expa();
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_7(2)) {
        t = jj_consume_token(PERIOD);
        jj_consume_token(LENGTH);
   System.out.print(".length");
        Expa();
      } else if (jj_2_8(2)) {
        jj_consume_token(PERIOD);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
   System.out.print("."+t.image+"(");
        ExpList();
   System.out.print(")");
        jj_consume_token(RPAREN);
        Expa();
      } else {

      }
    }
  }

  static final public void ExpList() throws ParseException {
    Exp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      ExpRest();
    }
  }

  static final public void ExpRest() throws ParseException {
    jj_consume_token(COMMA);
   System.out.print(", ");
    Exp();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public parseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x2000000,0x40000,0x1008000,0xa4000000,0xa4000000,0x1008000,0x1008000,0x0,0x0,0x600,0x800,0x0,0x18402000,0x80,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x4120,0x20,0x20,0x4120,0x4100,0x2000,0x800,0x0,0x0,0x2,0x20,0x0,0x40,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public parse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public parse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public parse(parseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(parseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
