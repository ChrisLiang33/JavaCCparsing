/*
 * This is parse.jj
 */

options {
  IGNORE_CASE = false;
}

PARSER_BEGIN(parse)
import java.io.*;
public class parse
{
    public static void main(String args[]) throws ParseException 
    {
        System.out.println("Reading from standard input...");
        parse t = new parse(System.in);
        try {
            t.Program(0);
            System.out.println("Thank you.");
    }   catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
    }
    }
}
PARSER_END(parse)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* >
| <MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/", "*"])* "*" "/" >
}


TOKEN:
{
   <LPAREN:    "(" >
|  <RPAREN:    ")" >
//| <OPERATOR: "&&"|"<"|"+"|"-"|"*">
| <ADD: "+">
| <MINUS: "-">
//|  <PLUS:    "+"> 
//| <MINUS: "-" >
|  <MULTIPLY:   "*">
| <DIVIDE:  "/" >
|  < INTEGER_LITERAL: (["0"-"9"])+ >
|  <CLASS:"class">
|  <IF: "if">
| <ELSE: "else">
|  <STRING: "String"> //<STRING_ARRAY: "String []">
|<PUBLIC: "public">
| <STATIC: "static">
| <VOID: "void">
| <MAIN: "main">
| <THIS: "this">
| <PERIOD: ".">
| <WHILE: "while">
| <EXTENDS: "extends">
| <BOOLEAN: "boolean">
| <TRUE: "true">
| <FALSE: "false">
| <INT: "int">
| <LENGTH: "length">
| <INT_ARRAY: "int[]">
| <NEW: "new">
| <NOT: "!">
| <EQUALS: "=">
| <COMMA: ",">
| <RETURN: "return">
| <IDENTIFIER: (["a"-"z", "A"-"Z"])+ (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LCBRACKET: "{">
| <RCBRACKET: "}">
| <SEMICOLON: ";">
| <LESS_THAN: "<">
| <MORE_THAN: ">">
| <AND: "&&">
//| <OR: "||">
| <PRINT: "System.out.println">
//| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* >
//| <MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/", "*"])* "*" "/" >
}

void Program(int indent):
{}
{
    MainClass(indent) (ClassDecls(indent)) 
   // {System.out.println("parsable");}
    <EOF>
}

void MainClass(int indent):
{Token s,t;}
{
    <CLASS>
    t=<IDENTIFIER>
    <LCBRACKET> 
    {System.out.println("class "+t.image+"{");}
    <PUBLIC><STATIC><VOID><MAIN>
    {System.out.print("    public static void main"); }
    <LPAREN><STRING><LBRACKET><RBRACKET>
    s=<IDENTIFIER>
    <RPAREN>
    {System.out.println("(String[] "+s.image + "){");  }
    <LCBRACKET>Statement(indent+2) <RCBRACKET><RCBRACKET>
    {System.out.print("  }\n}\n"); }
}

void ClassDecls(int indent):
{}
{
  (ClassDecl(indent))*
}

void ClassDecl(int indent):
{Token t,s;
String a,b;}
{ 
    <CLASS>
    t =<IDENTIFIER>
    {System.out.print("class "+t.image);}
    (<EXTENDS>
    s=<IDENTIFIER>
    {System.out.print(" extends "+s.image);}
    )?
    <LCBRACKET>
    {System.out.print("{");}

    a=VarDecls(indent+1)
    {System.out.println(a);}
    MethodDecls(indent+1) 
    //{System.out.println(b);}
    <RCBRACKET>
    {System.out.println("}");}
    
   // |
   // <CLASS><IDENTIFIER><EXTENDS> <IDENTIFIER> <LCBRACKET> (VarDecl())* (MethodDecl())* <RCBRACKET>
}

String VarDecls(int indent):
{String a,b;}
{ LOOKAHEAD(3)
  a=VarDecl(indent) b=VarDecls(indent)
    {return (a+b);}
  |
  {} {return("");}
}

String VarDecl(int indent):
{Token t;
String a;}
{
    a = Type() 
    t=<IDENTIFIER> <SEMICOLON>
    {return
      String.format("\n%1$"+4*indent+"s","") + a + " " + t.image+";"
      ;}
}

void MethodDecls(int indent):
{}
{
    LOOKAHEAD(3)
    (MethodDecl(indent))* VarDecls(indent)
    |
    {}
}



void MethodDecl(int indent):
{ String s,t;
String v ="";
Token a;}
{

 <PUBLIC> 
 t = Type() 
 a=<IDENTIFIER> 
 <LPAREN>
 s=FormalList() 
 {System.out.format("%1$"+4*indent+"s", "");}
 {System.out.print("public "+t+" " + a.image + "(" + s+ ")" + "{");}

 <RPAREN><LCBRACKET>
 v = VarDecls(indent+1)
 //(LOOKAHEAD(2) 
  //v=VarDecl(indent+1))* 
  //{System.out.format("%1$"+4*indent+"s", "");}
  {System.out.println(v);}
  (Statement(indent+1))* 
  
  <RETURN> 
  {System.out.format("%1$"+4*(indent+1)+"s", "");}
  {System.out.print("return ");}
  Exp() 
  <SEMICOLON> 
  {System.out.print(";");}
  <RCBRACKET>
  {System.out.println("");}
  {System.out.format("%1$"+4*indent+"s", "");}
  {System.out.println("}");}

}

String FormalList():
{Token a;
String b,c;}
{
    c= Type() a=<IDENTIFIER> b=FormalRests()
    {return(c+" " + a + b);}
    |
    {}{return("");}
}

String FormalRests():
{String a,b;}
{ LOOKAHEAD(3)
  a=FormalRest() b=FormalRests()
    {return (a+b);}
  |
  {} {return("");}
}


String FormalRest():
{String a;
Token b;}
{
  <COMMA> 
  a=Type() 
  b=<IDENTIFIER>
  {return (", "+a+" " +b.image);}
}

String Type():
{ Token t; }
{ 
  (
    t = <INT_ARRAY>
    |
    t = <BOOLEAN>
    |
    t = <INT>
    |
    t = <IDENTIFIER>
  )
  { return t.image; }
}

void Statements(int indent):
{}
{
  (Statement(indent))*
}

void Statement(int indent):
{ Token t; }
{
  (
    <LCBRACKET>
    //{System.out.format("%1$"+4*indent+"s", "");}
      {System.out.println("{");}
      //(Statement(indent+1))*
      Statements(indent)
      //{System.out.println("");}
      //{System.out.format("%1$"+4*indent+"s", "");}
      {System.out.print("}");}
      <RCBRACKET> 
  |
  <IF>
  <LPAREN>
  {System.out.format("%1$"+4*indent+"s", "");}
    {System.out.print("if (");}
  Exp()
  <RPAREN>
    {System.out.print(")");}
  Statement(indent+1)
  {System.out.println("");}
  <ELSE>
    {System.out.format("%1$"+4*indent+"s", "");}
    {System.out.print("else");}
  Statement(indent+1)
    {System.out.println();}
  |
  <WHILE> <LPAREN>
  {System.out.format("%1$"+4*indent+"s", "");}
    {System.out.print("while (");}
  Exp() 
  <RPAREN>
  {System.out.print(")");}
  //{System.out.println("");}
  Statement(indent+1)
    {System.out.println();}
  |
  <PRINT><LPAREN>
  {System.out.format("%1$"+4*indent+"s", "");}
    {System.out.print("System.out.println(");}
    Exp()
  <RPAREN><SEMICOLON>
    {System.out.print(");");}
    {System.out.println();}
    
  |
  LOOKAHEAD(2) t = <IDENTIFIER><EQUALS> 
  {System.out.format("%1$"+4*indent+"s", "");}
    {System.out.print(t.image+"=");}
    Exp() <SEMICOLON>
    {System.out.print(";");}
    {System.out.println();}
  |
  LOOKAHEAD(2) t=<IDENTIFIER><LBRACKET>
  {System.out.format("%1$"+4*indent+"s", "");}
    {System.out.print(t.image+"[");}
  Exp()
  <RBRACKET> <EQUALS> 
    {System.out.print("]=");}
  Exp() 
    {System.out.print(";");}
    <SEMICOLON>


  )
}

void Exp():
{}
{
  Exp4()
}

void Exp4():
{}
{
  Exp9()  Exp4a()
}

void Exp4a():
{}
{
  <AND> 
  {System.out.print("&&");}
  Exp9() 
  Exp4a() 
  
  |
  {}
}

void Exp9():
{}
{
  Exp11() Exp9a()
}

void Exp9a():
{}
{
  <LESS_THAN> 
  {System.out.print("<");}
  Exp11() 
   Exp9a()
 
  |
  {}
}
void Exp11():
{}
{
  Exp12() Exp11a()
}

void Exp11a():
{}
{
  <ADD> 
  {System.out.print("+");}
  Exp12() 
  Exp11a()
  
  |
  <MINUS> 
  {System.out.print("-");}Exp12() 
  Exp11a()
  |
  {}
}

void Exp12():
{}
{
  Exp14() Exp12a()
}

void Exp12a():
{}
{
  <MULTIPLY> 
  {System.out.print("*");}
  Exp14() 
  Exp12a()
  
  |
  {}
}

void Exp14():
{}
{
  Exp16() Exp14a()
}

void Exp14a():
{}
{
  <NOT> 
  {System.out.print("!");}
  Exp16() 
  Exp14a()
  
  |
  {}
}

void Exp16():
{ Token t;}
{
  (
    t = <INTEGER_LITERAL> 
    {System.out.print(t.image);}
    Exp()
    
    |
    t = <TRUE> 
    {System.out.print("true");}
    Exp()
    
    |
    t = <FALSE> 
    {System.out.print("false");}
    Exp()
    
    |
    t = <IDENTIFIER> 
    {System.out.print(t.image);}
    Exp()
    
    |
    t = <THIS> 
    {System.out.print("this");}
    Exp()
    
    |
    LOOKAHEAD(2) <NEW>t=<IDENTIFIER><LPAREN>
    {System.out.print("new "+t.image+"()");}
    <RPAREN> Expa() Exp()

    |
    LOOKAHEAD(2) t =<NEW><INT><LBRACKET>
    {System.out.print("new int [");}
     Exp()<RBRACKET> Expa() Exp()
     {System.out.print("]");}
    | 
    t = <LPAREN>
    {System.out.print("(");}
    Exp()<RPAREN> 
    {System.out.print(")");}Expa() Exp() 
    | 
    Expa()
  )
}
void Expa():
{ Token t; }
{
  (
 // t=<OPERATOR> Exp() Expa()
 // |
  t=<LBRACKET>
  {System.out.print("[");}
  Exp()<RBRACKET> 
  {System.out.print("]");}
  Expa()
  |
  LOOKAHEAD(2) t=<PERIOD> <LENGTH> 
  {System.out.print(".length");}
  Expa()
  |
  LOOKAHEAD(2) <PERIOD> t=<IDENTIFIER><LPAREN> 
  {System.out.print("."+t.image+"(");}
  ExpList() 
  {System.out.print(")");}<RPAREN> 
  Expa()
  |
  {}
  )
}


void ExpList():
{}
{
  Exp() (ExpRest())*
}

void ExpRest():
{}
{
  <COMMA> 
  {System.out.print(", ");}Exp()
  
}