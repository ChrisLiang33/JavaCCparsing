/*
 * This is parse.jj
 */

options {
  IGNORE_CASE = false;
}

PARSER_BEGIN(parse)
class parse {
    /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    parse parser = new parse(System.in);
    parser.Program();
  }

}
PARSER_END(parse)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}


TOKEN:
{
  <LPAREN: "(">
| <RPAREN: ")">
| <PLUS: "+">
| <MINUS: "-">
| <MULTIPLY: "*">
//| <DIVIDE: "/">
| <INTEGER_LITERAL: (["0"-"9"])+>
| <CLASS: "class">
| <IF: "if">
| <ELSE: "else">
| <PUBLIC: "public">
| <STATIC: "static">
| <VOID: "void">
| <MAIN: "main">
| <THIS: "this">
| <DOT: ".">
| <WHILE: "while">
| <EXTENDS: "extends">
| <BOOLEAN: "boolean">
| <TRUE: "true">
| <FALSE: "false">
| <INT: "int">
| <LENGTH: "length">
| <INT_ARRAY: "int []">
| <NEW: "new">
| <NOT: "!">
| <EQUALS: "=">
| <COMMA: ",">
| <RETURN: "return">
| <IDENTIFIER: (["a"-"z", "A"-"Z"])+ (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
| <LBRACKET: "[">
| <RBRACKET: "]">
| <LCBRACKET: "{">
| <RCBRACKET: "}">
| <SEMICOLON: ";">
//| <MORE_THAN: ">">
| <LESS_THAN: "<">
| <AND: "&&">
//| <OR: "||">
| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])*>
| <MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/", "*"])* "*" "/" >
| <PRINT: "System.out.println">
}


/* Program Syntax */

void Program():
{}
{
  Exp()
  <EOF>
}

// 
// grammar for mini java
// E  -> MainClass ClassDecl*
// MainClass -> class id { public static void main ( String [] id ) { Statement } }
// ClassDecl -> class id { VarDecl MethodDecl } | class id extends id { VarDecl MethodDecl }
// VarDecl -> Typeid;
// MethodDecl -> public Type id ( FormalList ) ExpList ExpRest
// id
//
//
// 



void Exp():
{}
{
    MainClass() (ClassDecl())*
}

void MainClass():
{}
{
    <CLASS>id()<LCBRACKET> <PUBLIC><STATIC><VOID><MAIN><LPAREN><<STRING_ARRAY>
}




void Statement():
{}
{
  <LCBRACKET>(Statement())*<RCBRACKET> 
  |
  <IF><LPAREN>Exp()<RPAREN>Statement()<ELSE>Statement()
  |
  <WHILE>
  |
  
}

void ExpList():
{}
{
  Exp() ExpRest()*
}

void ExpRest():
{}
{
  <COMMA> Exp()
}
